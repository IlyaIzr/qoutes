{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allimages","imageUrl","allHtext","allBtext","highText","bottomText","onClick","bind","assertThisInitialized","_this2","fetch","then","response","json","urls","setState","randNum","Math","floor","random","length","randMemeImg","randHNum","randHText","randBNum","randBText","ctx","refs","canvas","getContext","img","image","width","document","body","clientWidth","height","window","innerHeight","onload","drawImage","fillStyle","textAlign","font","fillText","strokeText","strokeStyle","getElementById","addEventListener","event","target","style","opacity","setTimeout","button","right","top","elem","parentNode","removeChild","randImg","innerWidth","w","h","react_default","a","createElement","className","id","formtarget","autofocus","ref","src","alt","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a13b359b.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      allimages: [],\n      imageUrl: \"\",\n      allHtext: [],\n      allBtext: [],\n      highText: \"\",\n      bottomText: \"\",\n    }\n    this.onClick = this.onClick.bind(this)\n  }\n\n\n componentDidMount(){\n  fetch(\"https://ilyaizr.github.io/qoutes/jsons/imagesurls.json\")\n          .then(response => response.json())\n            .then(response => {\n              const {urls} = response\n\n              this.setState({allimages: urls})\n\n              //console.log(this.state.allimages.length)\n\n              const randNum = Math.floor(Math.random() * this.state.allimages.length)\n              const randMemeImg = this.state.allimages[randNum]\n              this.setState({imageUrl: randMemeImg})\n            }\n          )\n\n  fetch(\"https://ilyaizr.github.io/qoutes/jsons/texts.json\")\n            .then(response => response.json())\n              .then(response => {\n                const {highText} = response\n                const {bottomText} = response\n                this.setState({allHtext: highText})\n                this.setState({allBtext: bottomText})\n\n                const randHNum = Math.floor(Math.random() * this.state.allHtext.length)\n                const randHText = this.state.allHtext[randHNum]\n                this.setState({highText: randHText})\n\n                const randBNum = Math.floor(Math.random() * this.state.allBtext.length)\n                const randBText = this.state.allBtext[randBNum]\n                this.setState({bottomText: randBText})\n              }\n            )\n\nconst canvas = this.refs.canvas\nconst ctx = canvas.getContext(\"2d\")\nconst img = this.refs.image\nlet width = document.body.clientWidth*1.01\nlet height = window.innerHeight\n\n    img.onload = () => {\n          ctx.drawImage(img, 0, 0, (width), (height))\n\n          ctx.fillStyle = \"Pink\"\n\n          if (width>height){    //PC screens\n          ctx.textAlign = \"center\"\n          ctx.font = \"5rem Courier\"\n          ctx.fillText(this.state.highText, (width*0.3), (height*0.1), 600)\n          ctx.strokeText(this.state.highText, (width*0.3), (height*0.1), 600)\n\n          ctx.fillStyle = \"LightBlue\"\n          ctx.fillText(this.state.bottomText, (width*0.65), (height*0.9), 500)\n          ctx.strokeStyle = \"black\";\n          ctx.strokeText(this.state.bottomText, (width*0.65), (height*0.9), 500)\n          document.getElementById(\"button\").addEventListener(\"mouseover\", function(event) {\n            event.target.style.opacity = \"0.6\"\n          })\n          document.getElementById(\"button\").addEventListener(\"mouseleave\", function(event) {\n            event.target.style.opacity = \"0.2\"\n            setTimeout(function() {\n              event.target.style.opacity = \"0.1\"\n            }, 1200)\n            setTimeout(function() {\n              event.target.style.opacity = \"0\"\n            }, 2000)\n          }, false)\n\n\n\n            }\n\n          else{               //set for mobile screens\n          ctx.textAlign = \"left\"\n          ctx.font = \"3rem Courier\"\n          ctx.strokeText(this.state.highText, (width*0.1), (height*0.15), 300)\n          ctx.fillText(this.state.highText, (width*0.1), (height*0.15), 300)\n          ctx.textAlign = \"right\"\n          ctx.fillStyle = \"LightBlue\"\n          ctx.strokeStyle = \"black\";\n          ctx.strokeText(this.state.bottomText, (width*0.85), (height*0.9), 300)\n          ctx.fillText(this.state.bottomText, (width*0.85), (height*0.9), 300)\n                              //new button style\n          let button = document.getElementById(\"button\")\n          button.style.right = \"0px\"\n          button.style.top = \"20%\"\n          button.style['border-radius'] = \"15px 0px 0px 15px\"\n          button.style['border-right'] = \"transparent\"\n          button.style.height = \"60%\"\n          button.style.width = \"30%\"\n          button.style.opacity = \"0\"\n            }\n\n\n        }\n\n    let elem = document.getElementById('toRemove');\n    elem.parentNode.removeChild(elem);\n\n    }\n\n  onClick(){    //generating new text and image\n    const randNum = Math.floor(Math.random() * this.state.allimages.length)\n    const randImg = this.state.allimages[randNum]\n    this.setState({ imageUrl: randImg })\n\n    const randHNum = Math.floor(Math.random() * this.state.allHtext.length)\n    const randHText = this.state.allHtext[randHNum]\n    this.setState({highText: randHText})\n\n    const randBNum = Math.floor(Math.random() * this.state.allBtext.length)\n    const randBText = this.state.allBtext[randBNum]\n    this.setState({bottomText: randBText})\n      if (window.innerWidth<window.innerHeight){\n        document.getElementById('button').style.opacity=\"0.7\"\n        document.getElementById('button').style['border-color'] = \"rgba(255,255,255,0.1)\"\n      }\n  }\n\n\n  render(){\n    let w = document.body.clientWidth\n    let h = window.innerHeight*1.01\n    //console.log(w)\n    //console.log(h)\n    return (\n      <div className=\"App\">\n\n          <button className=\"generator\" id=\"button\"\n            formtarget =\"_parent\"\n            autofocus =\"true\"\n            onClick={this.onClick}\n            >\n            generate\n          </button>\n\n            <canvas ref=\"canvas\"\n            width={w}\n            height={h}\n            id=\"canvas\"\n            />\n\n          <img src={this.state.imageUrl}\n            width={w}\n            height={h}\n            ref=\"image\"\n            alt=\"beau\"\n            id=\"toRemove\"\n            />\n\n\n      </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}